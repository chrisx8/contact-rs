name: Build
on:
  push:
    branches: main
  schedule:
    - cron: '0 3 * * 0'
jobs:
  build_binary:
    name: Build Linux x86_64 binary
    runs-on: ubuntu-latest
    env:
      TARGET: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v3
      - name: Install musl-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - name: Set up Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ env.TARGET }}
          toolchain: stable
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --jobs 2 --locked --release --target ${{ env.TARGET }}
      - name: Strip binary
        run: strip target/${{ env.TARGET }}/release/contact-rs
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: contact-rs_${{ env.TARGET }}
          path: target/${{ env.TARGET }}/release/contact-rs
  build_container:
    name: Build container image
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: contact-rs
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}:latest
      - name: Remove untagged images
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GHCR_DELETE_TOKEN }}
          script: |
            const response = await github.request("GET /user/packages/container/${{ env.PACKAGE_NAME }}/versions");
            for(version of response.data) {
                if (version.metadata.container.tags.length == 0) {
                    const deleteResponse = await github.request("DELETE /user/packages/container/${{ env.PACKAGE_NAME }}/versions/" + version.id, { });
                    console.log("[status] " + deleteResponse.status);
                    console.log("Deleted version " + version.id);
                }
            }
